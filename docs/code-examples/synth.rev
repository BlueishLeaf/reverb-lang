var isPrime = fn(n, i) begin
    if n < 2 then return false end
    if n == 2 then return true end
    if i * i > n then return true end

    var getRemainder = fn(num, divisor) begin
        return num - divisor * (num / divisor)
    end

    if getRemainder(n, i) == 0 then return false end
    return isPrime(n, i + 1)
end

var forLoop = fn(start, stop, f) begin
    var loop = fn(i, primes) begin
        if i < stop then
            if f(i, 2) then
                return loop(i + 1, push(primes, i))
            end
            return loop(i + 1, primes)
        end
        return primes
    end
    loop(start, [])
end

var mapPrimes = fn(array, f) begin
    var loop = fn(array, accumulated) begin
        if (length(array) == 1) then
            return accumulated
        end
        return loop(tail(array), push(accumulated, f(head(array), tail(array)[0])))
    end
    return loop(array, [])
end

var mapNegatives = fn(array, f) begin
    var loop = fn(array, accumulated) begin
        if (length(array) == 0) then
            return accumulated
        end
        return loop(tail(array), push(accumulated, f(head(array))))
    end
    return loop(array, [])
end

var diff = fn(x, y) begin x - y end
var square = fn(x) begin x * x end

var primes = forLoop(1, 100, isPrime)
print(primes)

var diffs = mapPrimes(primes, fn(x, y) begin x - y end)
print(diffs)

var loopSequence = fn(array) begin
    var loop = fn(array) begin
        if (length(array) == 0) then
            return array
        end
        sequence(head(array), 1000)
        return loop(tail(array))
    end
    return loop(array, [])
end

loopSequence(diffs)